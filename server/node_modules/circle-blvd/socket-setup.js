// Setup for Socket.io
var express = require('express');
var auth   = require('circle-blvd/auth-local');

// io: socket.io module instance
// sessionMiddleware: expressSession instance
var middleware = function (io, sessionMiddleware) {
    var router = express.Router();

    io.use(function (socket, next) {
        sessionMiddleware(socket.request, {}, next);
    });

    io.use(function (socket, next) {
        // Add our user to the request, if we can.
        if (socket && 
            socket.request && 
            socket.request.session && 
            socket.request.session.passport && 
            socket.request.session.passport.user) {
            var user = socket.request.session.passport.user;
            auth.findUser(user, function (err, user) {
                if (err) {
                    return next(err);
                }
                socket.request.user = user;
                next();
            });
        }
        else {
            next();
        }
    });

    function hasAccessToCircle(user, circleId) {
        var hasAccess = false;

        // Only allow access circle events if
        // we're members of some sort.
        if (user && user.memberships) {
            var groups = user.memberships;
            for (var groupKey in groups) {
                if (groups[groupKey].circle === circleId) {
                    hasAccess = true;
                }
            }
        }

        return hasAccess;
    }

    io.on('connection', function (socket) {
        socket.on('join-circle', function (data) {
            if (!data.circle) {
                // No circle specified
                return;
            }

            if (hasAccessToCircle(socket.request.user, data.circle)) {
                socket.join(data.circle);
            }
            else {
                socket.join(data.circle + "-guest");
            }
        });

        socket.on('story-highlighted', function (data) {
            var user = socket.request.user;
            var circleId = data.circle;
            var storyId = data.storyId;
            
            if (hasAccessToCircle(user, circleId)) {
                io.to(circleId).emit('story-highlighted', {
                    data: {
                        storyId: storyId
                    },
                    user: user.name
                });
            }
        });
    });

    router.use(function (req, res, next){
        res.on('finish', function(){
            if (res.circleBlvd && res.circleBlvd.notifyCircle) {
                var circleId = res.circleBlvd.notifyCircle;
                if (res.circleBlvd.notifyType) {
                    var payload = {};
                    // Attached the signed in user to the payload
                    if (req.user) {
                        payload.user = req.user.name;
                    }
                    payload.data = res.circleBlvd.notifyData;
                    io.to(circleId).emit(res.circleBlvd.notifyType, payload);
                }

                // Always emit a ping to guest listeners.
                // This is basically a workaround for mobile
                // clients until we develop a more proper solution.
                var circleGuests = circleId + "-guest";
                io.to(circleGuests).emit('o');
            }
        });
        next();
    });

    return router;
};

module.exports = middleware;