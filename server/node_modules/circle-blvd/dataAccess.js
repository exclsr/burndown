var couch = require('circle-blvd/data/couch/couch');

var data = {};
data.archives  = require('circle-blvd/data/archives')(couch);
data.circles   = require('circle-blvd/data/circles')(couch);
data.invites   = require('circle-blvd/data/invites')(couch);
data.docs      = require('circle-blvd/data/docs')(couch);
data.groups    = require('circle-blvd/data/groups')(couch);
data.settings  = require('circle-blvd/data/settings')(couch);
data.stories   = require('circle-blvd/data/stories')(couch);
data.lists     = require('circle-blvd/data/lists')(couch);
data.users     = require('circle-blvd/data/users')(couch);
data.waitlist  = require('circle-blvd/data/waitlist')(couch);
data.whenReady = couch.database.whenReady;

var guard = require('circle-blvd/errors').guard;

var addStoriesForFirstCircle = function (newCircle, adminAccount, callback) {

	var newStory = function () {
		var story = {};
		story.projectId = newCircle._id;
		return story;
	};

	var nextMeeting = newStory();
	nextMeeting.summary = "Next planning meeting";
	nextMeeting.isNextMeeting = true;

	var stories = [
		nextMeeting
	];
	stories.reverse();

	var currentIndex = 0;

	var addStory = function (story, nextId) {
		if (nextId) {
			story.nextId = nextId;
		}
		db.stories.add(story, guard(callback, function (body) {
			currentIndex++;
			if (currentIndex >= stories.length) {
				callback();
			}
			else {
				addStory(stories[currentIndex], body.id);
			}
		}));	
	};

	addStory(stories[currentIndex]);
};

var addStoriesForNewCircle = function (newCircle, adminAccount, callback) {
	var newStory = function () {
		return newStoryInCircle(newCircle);
	};

	var nextMeeting = {};
	nextMeeting.projectId = newCircle._id;
	nextMeeting.summary = "Next planning meeting";
	nextMeeting.isNextMeeting = true;

	db.stories.add(nextMeeting, callback);	
};

var createCircle = function (circleName, adminEmailAddress, createStories, callback) {
	var circle = {
		name: circleName
	};

	db.users.findByEmail(adminEmailAddress, guard(callback, function (adminAccount) {
		circle.createdBy = {
			name: adminAccount.name,
			id: adminAccount._id
		};

		db.circles.add(circle, guard(callback, function (newCircle) {
			var administrativeGroup = {
				name: "Administrative",
				projectId: newCircle._id,
				isPermanent: true
			};

			var impliedGroup = {
				name: "_implied",
				projectId: newCircle._id,
				isPermanent: true
			};

			createStories(newCircle, adminAccount, guard(callback, function (body) {
				db.groups.add(administrativeGroup, function (adminGroup) {
					db.groups.add(impliedGroup, function (memberGroup) {

						var addCircleMembershipsToAdmin = function (account) {
							// admin access
							account.memberships.push({
								circle: newCircle._id,
								group: adminGroup.id,
								level: "member"
							});
							// member access
							account.memberships.push({
								circle: newCircle._id,
								group: memberGroup.id,
								level: "member"
							});

							db.users.update(account, 
								function (body) {
									callback(null, newCircle);
								},
								function (err) {
									callback(err);
								}
							);
						};

						if (adminAccount) {
							addCircleMembershipsToAdmin(adminAccount);
						}
						else {
							var err = {};
							err.message = "Admin account was not found. Cannot create circle " +
							"witout an exiting admin account.";
							callback(err);
						}
					},
					function (err) {
						// failure adding member group
						callback(err);
					});
				},
				function (err) {
					// failure adding admin group
					callback(err);
				});
			}));

		}));
	}));
};

data.circles.create = function (circleName, adminEmailAddress, callback) {
	createCircle(circleName, adminEmailAddress, addStoriesForNewCircle, callback);
};

data.circles.createFirst = function (circleName, adminEmailAddress, callback) {
	createCircle(circleName, adminEmailAddress, addStoriesForFirstCircle, callback);
};


var db = function() {
	return data;
}();


exports.instance = function() {
	return db;
};
