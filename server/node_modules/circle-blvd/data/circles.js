// circles.js
//
var guard = require('circle-blvd/errors').guard;

module.exports = function (couch) {
	couch.circles = require('./couch/circles.js')(couch);

	var addCircle = function (circle, callback) {
		var newCircle = {
			name: circle.name,
			createdBy: circle.createdBy,
			colors: {},
			isAnonymous: true
		};

		couch.circles.add(newCircle, guard(callback, function (body) {
			newCircle._id = body.id;
			newCircle._rev = body.rev;
			callback(null, newCircle);
		}));
	};

	var countCreatedByUser = function (user, callback) {
		couch.circles.findByUser(user, guard(callback, function (rawCircles) {
			// TODO: Need to remove dups from the view
			var circles = {};
			rawCircles = rawCircles || [];
			rawCircles.forEach(function (circle) {
				circles[circle._id] = circle;
			});

			var circlesCreatedCount = 0;
			for (var key in circles) {
				var circle = circles[key];
				if (circle.createdBy
				&& circle.createdBy.id === user._id
				&& !circle.isArchived) {
					circlesCreatedCount++;
				}
			}

			callback(null, circlesCreatedCount);
		}));
	};

	var updateCircle = function (circle, callback) {
		couch.circles.update(circle, callback);
	};

	var count = function countCircles (callback) {
		couch.circles.count(callback);
	};

	var getStanding = function (circleId, settings, callback) {
		var standing      = {};
		var freeTrialDays = 0;

		var finish = function (err, val) {
			if (callback) {
				callback(err, val);
			}
		};

		if (!settings["stripe-public-key"]) {
			// Payment is disabled; everyone is in good standing.
			standing.state = 'good';
			return finish(null, standing);
		}

		if (settings["free-trial-days"]) {
			freeTrialDays = settings["free-trial-days"].value;
		}

		couch.circles.get(circleId, guard(callback, function (circle) {
			var sponsor = null;
			if (!circle.createdBy) {
				// Early adopters get a free pass, unofficially.
				sponsor = 'early-adopter';
				// standing.sponsor = sponsor; // yes / no?
				standing.state = 'good';
				return finish(null, standing);
			}
			else {
				sponsor = circle.sponsoredBy || circle.createdBy;
			}

			if (sponsor && sponsor.name) {
				standing.sponsorName = sponsor.name;
			}

			couch.docs.get(sponsor.id, guard(callback, function (member) {
				if (member && member.subscription && member.subscription.created) {
					standing.state = 'good';
				}
				else {
					var joinDate = member.joinDate || "2015-01-01T00:00:00.000Z";
					var joinDateInMs = Date.parse(joinDate);

					var nowInMs = Date.now();
					var freeTrialMs = freeTrialDays * 1000 * 60 * 60 * 24;

					if (joinDateInMs + freeTrialMs > nowInMs) {
						standing.state = 'good';
					}
					else {
						standing.state = 'unpaid';                    
					}
				}

				return finish(null, standing);
			}));
		}));
	};
	
	return {
		add: addCircle,
		count: count,
		get: couch.circles.get,
		getAll: function (callback) {
			couch.circles.getAll(callback);
		},
		findByUser: function (user, callback) {
			couch.circles.findByUser(user, callback);
		},
		countByUser: countCreatedByUser,
		getStanding: getStanding,
		update: updateCircle
	};
};
