// couch/list-meta.js
//
var guard = require('@holmwell/errors').guard;

module.exports = function (couch) {
    var database = couch.db;
    var stories = require('./stories.js')(couch);

    var getListMetaId = function (listId) {
        return listId + "-list-meta";
    }

    var createListMeta = function (listId, callback) {
        couch.docs.get(listId, guard(callback, function (list) {
            if (list.type !== "circle" && list.type !== "list") {
                var error = new Error("Document is not a list (or circle)");
                error.status = 400;
                return callback(error);
            }

            var meta = {
                _id: getListMetaId(listId),
                'listId': listId,
                'nextIds': {},
                'type': 'list-meta'
            };

            stories.findByListId(listId, guard(callback, function (dbStories) {
                dbStories.forEach(function (story, index, array) {
                    if (story.isNextMeeting) {
                        meta['nextMeetingId'] = story._id;
                    }
                    if (story.isFirstStory) {
                        meta['firstStoryId'] = story._id;
                    }
                    meta['nextIds'][story._id] = story.nextId || ('last-' + listId);
                });

                database.insert(meta, callback);
            }));
        }));
    };


    // (wasHereBefore is to prevent an infinite recursion if
    // something is wrong)
    function byListId(listId, callback, wasHereBefore) {
        if (!listId)  {
            var error = new Error("listId must have a value");
            error.status = 400;
            return callback(error);
        }

        var listMetaId = getListMetaId(listId);

        couch.docs.get(listMetaId, function (err, body) {
            if (err && err['status-code'] === 404 && !wasHereBefore) {
                createListMeta(listId, guard(callback, function (body) {
                    byListId(listId, callback, true);
                }));
            }
            else {
                callback(err, body);                
            }
        });
    };

    return {
        byListId: byListId
    };
};