// Send events to Slack webhooks
var express = require('express');
var guard   = require('@holmwell/errors').guard;
var request = require('request');

var middleware = function (db) {
    var router = express.Router();

    var getSlackUrl = function (circle) {
        if (circle && circle.webhooks && circle.webhooks.slack) {
            return circle.webhooks.slack.url;
        }
    }

    var getCircleId = function (res) {
        // Use the SocketIO data we've already put on the response object.
        if (res.circleBlvd && res.circleBlvd.notifyCircle) {
            return res.circleBlvd.notifyCircle;
        }
    }

    var logError = function (err) {
        console.log(err);
    };

    var getTaskSummary = function (req, story) {
        var assigned = story.status ? "" : "?";
        var owner = story.owner ? " @" + story.owner + assigned : "";

        var link = req.protocol || "http";
        link += "://" + req.get('Host') + "/#/stories/" + story.id;

        var summary = "<" + link + "|" + (story.summary || '(empty)') + ">";
        return summary + owner;
    };

    var getCommentLine = function (story) {
        if (story.newComment) {
            var byLine = story.newComment.createdBy && story.newComment.createdBy.name;
            byLine = (byLine ? " by " + byLine : "")

            return "comment" + byLine + ": " + story.newComment.text;
        }
    };

    var getTaskMessage = function (message, req, story) {
        var msg = message + ': ' + getTaskSummary(req, story);

        if (story.newComment) {
            msg += "\n";
            msg += getCommentLine(story);
        }

        return msg;
    };

    var getNewTaskMessage = function (req, story) {
        var adjective = "new task";
        if (story.status === 'done') {
            adjective = "done";
        }
        return getTaskMessage(adjective, req, story); 
    };

    var getSavedTaskMessage = function (req, story) {
        var old = story._previousValue;

        if (old && old.status !== story.status) {
            if (story.status === 'done') {
                return getTaskMessage('done', req, story);
            }
            if (story.status === 'active') {
                return getTaskMessage('on it', req, story);
            }
            if (story.status === 'sad') {
                return getTaskMessage('maybe needs help', req, story);
            }

            if (story.status === 'assigned' || !story.status) {
                if (old.status === 'sad') {
                    return getTaskMessage('no longer needs help', req, story);
                }
                if (old.status === 'active') {
                    return getTaskMessage('no longer active', req, story);
                }
                if (old.status === 'done') {
                    return getTaskMessage('no longer done', req, story);
                }
            }
        }

        if (old && old.owner !== story.owner) {
            if (story.owner) {
                return getTaskMessage('new assignment', req, story);
            }
        }

        if (story.newComment) {
            return getTaskMessage('regarding', req, story);
        }

        return null;
    };

    var sendSlackMessages = function (req, res) {
        var circleId = getCircleId(res);
        if (!circleId) {
            // Nothing to do
            return;
        }

        db.docs.get(circleId, guard(logError, function (circle) {
            var slackUrl = getSlackUrl(circle);
            if (!slackUrl) {
                // Nothing to do
                return;
            }

            var text = undefined;
            var story = res.circleBlvd.notifyData;

            var slackPayload = {
                json: {
                    text: text
                }
            };

            switch (res.circleBlvd.notifyType) {
                case 'story-add':
                    text = 'new task:';
                    slackPayload.json.attachments = [
                        {
                            title: getTaskSummary(req, story),
                            fallback: "",
                            callback_id: story._id,
                            attachment_type: "default",
                            actions: [
                                {
                                    name: "Can't",
                                    text: "Can't",
                                    type: "button",
                                    value: "sad"
                                },
                                {
                                    name: "Will do",
                                    text: "Will do",
                                    type: "button",
                                    value: "assigned"
                                },
                                {
                                    name: "On it",
                                    text: "On it",
                                    type: "button",
                                    value: "active"
                                },
                                {
                                    name: "Done",
                                    text: "Done",
                                    type: "button",
                                    value: "done"
                                }
                            ]
                        }
                    ]
                    break;
                case 'story-save':
                    text = getSavedTaskMessage(req, story);
                    break;
            }

            if (!text) {
                // We don't have a Slack message for the action at hand.
                return;
            }

            slackPayload.json.text = text;

            request.post(slackUrl, slackPayload, function (err, response, body) {
                // TODO: Not sure who to notify ... 
                if (err) {
                    console.log(err);
                    return;
                }

                // if (response.statusCode === 200) {
                //     console.log(body)
                // }
            });
        }));
    };


    function slackWebhookMiddleware(req, res, next) {
        res.on('finish', function () {
            sendSlackMessages(req, res);
        });
        next();
    }

    router.use(slackWebhookMiddleware);

    return router;
};

module.exports = middleware;